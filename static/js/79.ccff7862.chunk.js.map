{"version":3,"sources":["../../common/formFields/PFEP/PFEPStatus.formFields.js","forms/PFEP/PFEPStatus.form.js"],"names":["PFEPStatusFormFields","key","type","FORM_ELEMENT_TYPES","SWITCH","others","defaultValue","formOptions","noStyle","customLabel","kwargs","placeholder","INPUT","Item","PFEPStatusForm","id","onCancel","active","onDone","useState","loading","setLoading","dropdownVisible","setDropdownVisible","useForm","form","dispatch","useDispatch","state","useSelector","e","data","pfepData","submit","a","ADD_PFEP_DATA","editPFEP","error","notification","warning","message","description","createPFEP","useEffect","STOP_STEP_LOADING","menu","onClick","className","CloseOutlined","slice","map","item","idx","toString","style","flexWrap","marginRight","formItem","spinning","orientation","onFinish","initialValues","layout","autoComplete","justifyContent","span","trigger","overlay","onVisibleChange","visible","preventDefault","DownOutlined","justify","htmlType"],"mappings":"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","file":"static/js/79.ccff7862.chunk.js","sourcesContent":["import { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\r\n\r\n// {\r\n//     key: 'status',\r\n//     kwargs: {\r\n//       placeholder: 'Select',\r\n//     },\r\n//     type: FORM_ELEMENT_TYPES.SELECT,\r\n//     others: {\r\n//       selectOptions: [\r\n//       'TP Shared', 'CP Shared', 'TP Approved',\r\n//         'CP Approved','Trials Done','Trials Approved','ESA Signed','Flow started',\r\n//         'On Hold' , 'PFEP Dropped' ,'Not Qualified'\r\n//       ],\r\n//     },\r\n//   },\r\n\r\nexport const PFEPStatusFormFields = [\r\n  {\r\n    key: 'tp_shared',\r\n    type: FORM_ELEMENT_TYPES.SWITCH,\r\n    others: {\r\n      defaultValue:false,\r\n      formOptions:{ noStyle:true }\r\n    },\r\n    customLabel: 'TP Shared',\r\n  },\r\n  {\r\n    key: 'cp_shared',\r\n    type: FORM_ELEMENT_TYPES.SWITCH,\r\n    others: {\r\n      defaultValue:false,\r\n      formOptions:{ noStyle:true }\r\n    },\r\n    customLabel: 'CP Shared',\r\n  },\r\n  {\r\n    key: 'tp_approved',\r\n    type: FORM_ELEMENT_TYPES.SWITCH,\r\n    others: {\r\n      defaultValue:false,\r\n      formOptions:{ noStyle:true }\r\n    },\r\n    customLabel: 'TP Approved',\r\n  },\r\n  {\r\n    key: 'cp_approved',\r\n    type: FORM_ELEMENT_TYPES.SWITCH,\r\n    others: {\r\n      defaultValue:false,\r\n      formOptions:{ noStyle:true }\r\n    },\r\n    customLabel: 'CP Approved',\r\n  },\r\n  {\r\n    key: 'trials_done',\r\n    type: FORM_ELEMENT_TYPES.SWITCH,\r\n    others: {\r\n      defaultValue:false,\r\n      formOptions:{ noStyle:true }\r\n    },\r\n    customLabel: 'Trials Done',\r\n  },\r\n\r\n  {\r\n    key: 'trials_approved',\r\n    type: FORM_ELEMENT_TYPES.SWITCH,\r\n    others: {\r\n      defaultValue:false,\r\n      formOptions:{ noStyle:true }\r\n    },\r\n    customLabel: 'Trials Approved',\r\n  },\r\n  {\r\n    key: 'esa_signed',\r\n    type: FORM_ELEMENT_TYPES.SWITCH,\r\n    others: {\r\n      defaultValue:false,\r\n      formOptions:{ noStyle:true }\r\n    },\r\n    customLabel: 'ESA Signed',\r\n  },\r\n\r\n  {\r\n    key: 'flow_started',\r\n    type: FORM_ELEMENT_TYPES.SWITCH,\r\n    customLabel: 'Flow started',\r\n    others: {\r\n      defaultValue:false,\r\n      formOptions:{ noStyle:true }\r\n    },\r\n  },\r\n  {\r\n    key: 'on_hold',\r\n    type: FORM_ELEMENT_TYPES.SWITCH,\r\n    customLabel: 'On Hold',\r\n    others: {\r\n      formOptions:{ noStyle:true }\r\n    } },\r\n  {\r\n    key: 'pfep_dropped',\r\n    type: FORM_ELEMENT_TYPES.SWITCH,\r\n    customLabel: 'PFEP Dropped',\r\n    others: {\r\n      formOptions:{ noStyle:true }\r\n    } },\r\n  {\r\n    key: 'not_qualified',\r\n    type: FORM_ELEMENT_TYPES.SWITCH,\r\n    customLabel: 'Not Qualified',\r\n    others: {\r\n      formOptions:{ noStyle:true }\r\n    } },\r\n  {\r\n    key: 'solution_remark',\r\n    kwargs: {\r\n      placeholder: 'Remark',\r\n    },\r\n    others: {\r\n      formOptions:{ noStyle:true }\r\n    },  type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Remark',\r\n  },\r\n]\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Form, Col, Row, Button, Divider, Spin,Menu, notification, Dropdown } from 'antd';\r\nimport formItem from 'hocs/formItem.hoc';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_PFEP_DATA, STOP_STEP_LOADING } from 'common/actions';\r\nimport {\r\n  CloseOutlined,\r\n  DownOutlined,\r\n} from '@ant-design/icons';\r\nimport { createPFEP, editPFEP } from 'common/api/auth';\r\nimport { PFEPStatusFormFields } from 'common/formFields/PFEP/PFEPStatus.formFields';\r\n\r\nconst { Item }  = Menu;\r\n\r\nexport const PFEPStatusForm = ({ id, onCancel,active,onDone }) => {\r\n  const [loading,setLoading] = useState(false);\r\n  const [dropdownVisible,setDropdownVisible] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const dispatch = useDispatch();\r\n  const state =  useSelector(e=>(e.data.pfepData))\r\n\r\n\r\n  const submit = async (data) =>{\r\n    setLoading(true)\r\n    await dispatch({ type:ADD_PFEP_DATA,data });\r\n    setLoading(false)\r\n    if(active === 5){\r\n      if(id){\r\n        const { error } = await editPFEP(id,{ ...state,...data });\r\n        if (error) {\r\n          notification.warning({\r\n            message: 'Unable To Edit.',\r\n            description:\r\n            'Something went wrong PFEP editing failed.',\r\n          });\r\n          onCancel();\r\n        } else {\r\n          onDone();\r\n        }\r\n      }\r\n      else{\r\n        const { error } = await createPFEP({ ...state,...data });\r\n        if (error) {\r\n          notification.warning({\r\n            message: 'Unable To Create.',\r\n            description:\r\n            'Something went wrong PFEP creation failed.',\r\n          });\r\n          onCancel();\r\n        } else {\r\n          onDone();\r\n        }\r\n      }\r\n    }}\r\n  useEffect( ()=>{\r\n    if(active!==5){\r\n      form.submit()\r\n      dispatch({ type:STOP_STEP_LOADING })\r\n    }\r\n  },[active])\r\n  const menu = (\r\n    <Menu onClick={(e)=>{if(e.key==='close'){setDropdownVisible(false)}}}>\r\n      <Item key='close'>\r\n        <div className='row justify-between align-center'>\r\n          Close\r\n          <CloseOutlined />\r\n        </div>\r\n      </Item>\r\n      {PFEPStatusFormFields.slice(0,11).map((item, idx) => (\r\n        <Item key={idx.toString()}>\r\n          <div className='row justify-between'>\r\n            <div style={{ flexWrap:'wrap',marginRight:'5px' }}>\r\n              {item.customLabel}\r\n              {' '}\r\n            </div>\r\n            {formItem(item)}\r\n          </div>\r\n        </Item>\r\n      ))}\r\n    </Menu>\r\n  )\r\n  return (\r\n    <Spin spinning={loading}>\r\n      <Divider orientation='left'>Status</Divider>\r\n      <Form\r\n        onFinish={submit}\r\n        initialValues={state}\r\n        form={form}\r\n        layout='vertical'\r\n        // hideRequiredMark\r\n        autoComplete='off'\r\n      >\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {PFEPStatusFormFields.slice(11,12).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {' '}\r\n          <Col span={5}>\r\n            <div className='p-2'>\r\n              <Dropdown\r\n                trigger={['click']}\r\n                overlay={menu}\r\n                onVisibleChange={(e)=>{setDropdownVisible(e)}}\r\n                visible={dropdownVisible}\r\n              >\r\n                <Button className='ant-dropdown-link' onClick={e => e.preventDefault()}>\r\n                  Select Status\r\n                  {' '}\r\n                  <DownOutlined />\r\n                </Button>\r\n              </Dropdown>\r\n            </div>\r\n            <br />\r\n            <br />\r\n            <br />\r\n          </Col>\r\n        </Row>\r\n        <Row justify='space-between'>\r\n          <div className='row'>\r\n            <Button type='primary' htmlType='submit'>\r\n              Submit\r\n            </Button>\r\n            <div className='p-2' />\r\n            <Button type='primary' onClick={onCancel}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n        </Row>\r\n      </Form>\r\n    </Spin>\r\n  );\r\n};\r\n\r\nexport default PFEPStatusForm;\r\n\r\n"],"sourceRoot":""}