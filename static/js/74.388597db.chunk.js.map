{"version":3,"sources":["../../common/formFields/createCP/solutionProposalCreateCP.formFields.js","../../common/constants/solutionproposalCreateCP.js","forms/CreateCP/solutionProposalCreateCP.form.js"],"names":["solutionProposalCreateCPFormFields","key","type","FORM_ELEMENT_TYPES","SELECT","others","selectOptions","customLabel","stdAssetsProposalCreateCPFormFields","INPUT","kwargs","placeholder","disabled","formOptions","noStyle","min","createFields","arr","fields","map","item","getSolutionProposal","record","standard_assets","std_ast_quantity_perkit","crate_lid_quantity_perkit","Lid","Pallet","palletized_lid_quantity_perkit","getLabels","insertType","FLC","FSC","CRT6412","CRT6418","CRT6423","CRT6435","getFields","formatStr","str","typeStr","getFieldsByColumn","getDefaultMonthValue","SolutionProposalCreateCPForm","id","onCancel","onNext","lead","active","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","data","createCPData","insert_type","setFields","labels","setLabels","submit","a","ADD_CREATE_CP_DATA","totalCostPerKit","setTotalCostPerKit","projectCost","setProjectCost","directCost","setDirectCost","updateCostPerKit","useCallback","q","r","qtyPerKitCols","getFieldValue","rateCols","forEach","i","push","ifNanReturnZeroFloat","sum","length","_","round","updateProjectCost","totalCostCols","temp","updateDirectCost","depCostCols","kit_based_on_usage_ratio","useEffect","STOP_STEP_LOADING","updateRemainingDisabledCols","totalKitQtysCols","totalMatReqCols","monthCols","idx","totalMatReqVal","setFieldsValue","updateTotalKitQtysCols","mould_quantity","updateMonthCols","slice","handleFieldsChange","name","currentInputField","spinning","initialValues","onFinish","layout","onFieldsChange","autoComplete","orientation","className","solution_flc","solution_fsc","solution_crate","solution_ppbox","solution_palletized_box","solution_palletized_crate","solution_pp","solution_stacking_nesting","solution_wp","style","justifyContent","span","toString","formItem","numberWithCommas","justify","htmlType","onClick","fontSize"],"mappings":"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","file":"static/js/74.388597db.chunk.js","sourcesContent":["import {FORM_ELEMENT_TYPES} from 'web/src/constants/formFields.constant';\r\n\r\nconst solutionAssetOptions = [\r\n  'FLC',\r\n  'FSC',\r\n  'CRT6412',\r\n  'CRT6418',\r\n  'CRT6423',\r\n  'CRT6435',\r\n  'Palletized CRT6412',\r\n  'Palletized CRT6418',\r\n  'Palletized CRT6423',\r\n  'Palletized CRT6435',\r\n  'PP Box',\r\n  'Palletized PP Box',\r\n  'Plastic Pallet',\r\n  'Wooden Pallet',\r\n];\r\n\r\nexport const solutionProposalCreateCPFormFields = [\r\n  {\r\n    key: 'standard_assets',\r\n    type: FORM_ELEMENT_TYPES.SELECT,\r\n    others: {\r\n      selectOptions: solutionAssetOptions,\r\n    },\r\n    customLabel: 'Standard Assets',\r\n  },\r\n  {\r\n    key: 'insert_type',\r\n    type: FORM_ELEMENT_TYPES.SELECT,\r\n    others: {\r\n      selectOptions: ['Insert', 'HDPE Tray'],\r\n    },\r\n    customLabel: 'Insert Type',\r\n  },\r\n  // {\r\n  //   key: 'cost',\r\n  //   type: FORM_ELEMENT_TYPES.INPUT,\r\n  //   kwargs: {\r\n  //     placeholder: 'Cost',\r\n  //     type:'number'\r\n  //   },\r\n  //   customLabel:'Cost'\r\n  // },\r\n];\r\n\r\n// Specification\tQuantity\tQyt/KIT\tRate\tTotal Cost\tMonth\tDep Cost\r\n\r\n// std_ast_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_rate = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_month = models.FloatField(default=0, blank=True, null=True)\r\n// std_ast_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// crate_lid_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_rate = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_month = models.FloatField(default=0, blank=True, null=True)\r\n// crate_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// palletized_lid_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_rate = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_month = models.FloatField(default=0, blank=True, null=True)\r\n// palletized_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// pallet_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_rate = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_month = models.FloatField(default=0, blank=True, null=True)\r\n// pallet_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// insert1_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_rate = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_month = models.FloatField(default=0, blank=True, null=True)\r\n// insert1_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// insert2_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_rate = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_month = models.FloatField(default=0, blank=True, null=True)\r\n// insert2_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// sep_sheet_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_rate = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_month = models.FloatField(default=0, blank=True, null=True)\r\n// sep_sheet_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// mould_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// mould_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// mould_rate = models.FloatField(default=0, blank=True, null=True)\r\n// mould_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// mould_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// mould_month = models.FloatField(default=0, blank=True, null=True)\r\n// mould_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n//\r\n// hdpe_quantity = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_rate = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_total_cost = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_month = models.FloatField(default=0, blank=True, null=True)\r\n// hdpe_dep_cost = models.FloatField(default=0, blank=True, null=True)\r\n\r\nexport const formListSolutionProposalCreateCPFormFields = [\r\n  {\r\n    key: 'specification',\r\n    kwargs: {\r\n      placeholder: 'Specification',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Specification',\r\n  },\r\n  {\r\n    key: 'quantity',\r\n    kwargs: {\r\n      placeholder: 'Total KIT Quantity',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Total KIT Quantity',\r\n  },\r\n  {\r\n    key: 'quantity_per_kit',\r\n    kwargs: {\r\n      placeholder: 'Qyt/KIT',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Qyt/KIT',\r\n  },\r\n  {\r\n    key: 'rate',\r\n    kwargs: {\r\n      placeholder: 'Rate',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Rate',\r\n  },\r\n  {\r\n    key: 'tot_mat_req',\r\n    kwargs: {\r\n      placeholder: 'Total Material Req',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Total Mat. Req.',\r\n  },\r\n  {\r\n    key: 'total_cost',\r\n    kwargs: {\r\n      placeholder: 'Total Cost',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Total Cost',\r\n  },\r\n  {\r\n    key: 'month',\r\n    kwargs: {\r\n      placeholder: 'Month',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Month',\r\n  },\r\n  {\r\n    key: 'dep_cost',\r\n    kwargs: {\r\n      placeholder: 'Dep Cost',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: null,\r\n    customLabel: 'Dep Cost',\r\n  },\r\n];\r\n\r\nexport const stdAssetsProposalCreateCPFormFields = [\r\n  {\r\n    key: '_quantity',\r\n    kwargs: {\r\n      placeholder: 'Quantity',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Total Kit Qty',\r\n  },\r\n  {\r\n    key: '_quantity_perkit',\r\n    kwargs: {\r\n      placeholder: 'Quantity/Kit',\r\n      type: 'number',\r\n    },\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Quantity/Kit',\r\n  },\r\n  {\r\n    key: '_rate',\r\n    kwargs: {\r\n      placeholder: 'Rate',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    customLabel: 'Rate',\r\n  },\r\n  {\r\n    key: '_tot_mat_req',\r\n    kwargs: {\r\n      placeholder: 'Total Mat. Req.',\r\n      disabled: true,\r\n    },\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Total Mat. Req.',\r\n  },\r\n  {\r\n    key: '_total_cost',\r\n    kwargs: {\r\n      placeholder: 'Total Cost',\r\n      type: 'number',\r\n      disabled: true,\r\n    },\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    customLabel: 'Total Cost',\r\n  },\r\n  {\r\n    key: '_month',\r\n    kwargs: {\r\n      placeholder: 'Month',\r\n      type: 'number',\r\n      min: 0,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    customLabel: 'Month',\r\n  },\r\n  {\r\n    key: '_dep_cost',\r\n    kwargs: {\r\n      placeholder: 'Dep Cost',\r\n      disabled: true,\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: {noStyle: true},\r\n    },\r\n    customLabel: 'Dep Cost',\r\n  },\r\n];\r\n\r\nexport const createFields = (arr) => {\r\n  let fields = [];\r\n  arr.map((key) => {\r\n    fields = [\r\n      ...fields,\r\n      ...stdAssetsProposalCreateCPFormFields.map((item) => ({\r\n        ...item,\r\n        key: `${key}${item.key}`,\r\n      })),\r\n    ];\r\n    return null;\r\n  });\r\n  return fields;\r\n};\r\n","import {createFields} from 'common/formFields/createCP/solutionProposalCreateCP.formFields';\r\n\r\nexport const solutionAssetOptions = [\r\n  'FLC',\r\n  'FSC',\r\n  'CRT6412',\r\n  'CRT6418',\r\n  'CRT6423',\r\n  'CRT6435',\r\n  'Palletized CRT6412',\r\n  'Palletized CRT6418',\r\n  'Palletized CRT6423',\r\n  'Palletized CRT6435',\r\n  'PP Box',\r\n  'Palletized PP Box',\r\n  'Plastic Pallet',\r\n  'Wooden Pallet',\r\n];\r\n\r\nexport const getSolutionProposal = (record) => {\r\n  if (\r\n    record.standard_assets === 'FLC' ||\r\n    record.standard_assets === 'FSC' ||\r\n    record.standard_assets === 'PP Box'\r\n  ) {\r\n    return {\r\n      [record.standard_assets]: record.std_ast_quantity_perkit,\r\n    };\r\n  }\r\n  if (\r\n    record.standard_assets === 'CRT6412' ||\r\n    record.standard_assets === 'CRT6418' ||\r\n    record.standard_assets === 'CRT6423' ||\r\n    record.standard_assets === 'CRT6435'\r\n  ) {\r\n    return {\r\n      [record.standard_assets]: record.crate_lid_quantity_perkit,\r\n    };\r\n  }\r\n  if (\r\n    record.standard_assets === 'Palletized CRT6412' ||\r\n    record.standard_assets === 'Palletized CRT6418' ||\r\n    record.standard_assets === 'Palletized CRT6423' ||\r\n    record.standard_assets === 'Palletized CRT6435' ||\r\n    record.standard_assets === 'Palletized PP Box' ||\r\n    record.standard_assets === 'Plastic Pallet' ||\r\n    record.standard_assets === 'Wooden Pallet'\r\n  ) {\r\n    return {\r\n      Lid: 1,\r\n      Pallet: 1,\r\n      [record.standard_assets]: record.palletized_lid_quantity_perkit,\r\n    };\r\n  }\r\n\r\n  return {};\r\n};\r\n\r\nexport const insertTypeOptions = ['Insert', 'HDPE Tray'];\r\n\r\nexport const getLabels = (type, insertType) => {\r\n  const specifications = {\r\n    FLC:\r\n      insertType === 'Insert'\r\n        ? ['FLC', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['FLC', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    FSC:\r\n      insertType === 'Insert'\r\n        ? ['FSC', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['FSC', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    CRT6412:\r\n      insertType === 'Insert'\r\n        ? ['CRT6412', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['CRT6412', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    CRT6418:\r\n      insertType === 'Insert'\r\n        ? ['CRT6418', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['CRT6418', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    CRT6423:\r\n      insertType === 'Insert'\r\n        ? ['CRT6423', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['CRT6423', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    CRT6435:\r\n      insertType === 'Insert'\r\n        ? ['CRT6435', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\r\n        : ['CRT6435', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    'Palletized CRT6412':\r\n      insertType === 'Insert'\r\n        ? [\r\n            'Palletized CRT6412',\r\n            'Palletized Lid',\r\n            'Pallet',\r\n            'Insert Type 1',\r\n            'Insert Type 2',\r\n            'Separator Sheet',\r\n          ]\r\n        : ['Palletized CRT6412', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    'Palletized CRT6418':\r\n      insertType === 'Insert'\r\n        ? [\r\n            'Palletized CRT6418',\r\n            'Palletized Lid',\r\n            'Pallet',\r\n            'Insert Type 1',\r\n            'Insert Type 2',\r\n            'Separator Sheet',\r\n          ]\r\n        : ['Palletized CRT6418', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    'Palletized CRT6423':\r\n      insertType === 'Insert'\r\n        ? [\r\n            'Palletized CRT6423',\r\n            'Palletized Lid',\r\n            'Pallet',\r\n            'Insert Type 1',\r\n            'Insert Type 2',\r\n            'Separator Sheet',\r\n          ]\r\n        : ['Palletized CRT6423', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    'Palletized CRT6435':\r\n      insertType === 'Insert'\r\n        ? [\r\n            'Palletized CRT6435',\r\n            'Palletized Lid',\r\n            'Pallet',\r\n            'Insert Type 1',\r\n            'Insert Type 2',\r\n            'Separator Sheet',\r\n          ]\r\n        : ['Palletized CRT6435', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\r\n    'PP Box': ['PP Box'],\r\n    'Palletized PP Box': ['Palletized PP Box', 'Palletized Lid', 'Pallet'],\r\n    'Plastic Pallet': ['Plastic Pallet', 'Palletized Lid'],\r\n    'Wooden Pallet': ['Wooden Pallet', 'Palletized Lid'],\r\n  };\r\n  return specifications[type];\r\n};\r\n\r\nexport const getFields = (type, insertType) => {\r\n  const specifications = {\r\n    FLC:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'sep_sheet', 'mould', 'hdpe']),\r\n    FSC:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'sep_sheet', 'mould', 'hdpe']),\r\n    CRT6412:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\r\n    CRT6418:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\r\n    CRT6423:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\r\n    CRT6435:\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\r\n    'Palletized CRT6412':\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\r\n    'Palletized CRT6418':\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\r\n    'Palletized CRT6423':\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\r\n    'Palletized CRT6435':\r\n      insertType === 'Insert'\r\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\r\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\r\n    'PP Box': insertType === 'Insert' ? createFields(['std_ast']) : createFields(['std_ast']),\r\n    'Palletized PP Box': createFields(['std_ast', 'palletized_lid', 'pallet']),\r\n    'Plastic Pallet': createFields(['std_ast', 'palletized_lid']),\r\n    'Wooden Pallet': createFields(['std_ast', 'palletized_lid']),\r\n  };\r\n  return specifications[type];\r\n};\r\n\r\nexport const formatStr = (str, typeStr) => {\r\n  return `${str}_${typeStr}`;\r\n};\r\n\r\nexport const getFieldsByColumn = (type, insertType, typeStr) => {\r\n  const specifications = {\r\n    FLC:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    FSC:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    CRT6412:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    CRT6418:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    CRT6423:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    CRT6435:\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('crate_lid', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    'Palletized CRT6412':\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    'Palletized CRT6418':\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    'Palletized CRT6423':\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    'Palletized CRT6435':\r\n      insertType === 'Insert'\r\n        ? [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('insert1', typeStr),\r\n            formatStr('insert2', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n          ]\r\n        : [\r\n            formatStr('std_ast', typeStr),\r\n            formatStr('palletized_lid', typeStr),\r\n            formatStr('pallet', typeStr),\r\n            formatStr('sep_sheet', typeStr),\r\n            formatStr('mould', typeStr),\r\n            formatStr('hdpe', typeStr),\r\n          ],\r\n    'PP Box':\r\n      insertType === 'Insert' ? [formatStr('std_ast', typeStr)] : [formatStr('std_ast', typeStr)],\r\n    'Palletized PP Box': [\r\n      formatStr('std_ast', typeStr),\r\n      formatStr('palletized_lid', typeStr),\r\n      formatStr('pallet', typeStr),\r\n    ],\r\n    'Plastic Pallet': [formatStr('std_ast', typeStr), formatStr('palletized_lid', typeStr)],\r\n    'Wooden Pallet': [formatStr('std_ast', typeStr), formatStr('palletized_lid', typeStr)],\r\n  };\r\n  return specifications[type];\r\n};\r\n\r\nexport const getDefaultMonthValue = (type) => {\r\n  switch (type) {\r\n    case 'std_ast':\r\n      return 18;\r\n    case 'crate_lid':\r\n      return 12;\r\n    case 'palletized_lid':\r\n      return 12;\r\n    case 'insert1':\r\n      return 12;\r\n    case 'insert2':\r\n      return 12;\r\n    case 'sep_sheet':\r\n      return 12;\r\n    case 'mould':\r\n      return 18;\r\n    case 'hdpe':\r\n      return 12;\r\n    default:\r\n      return 0;\r\n  }\r\n};\r\n","import React, {useEffect, useState, useCallback} from 'react';\r\nimport {Form, Col, Row, Button, Divider, Spin, Tag} from 'antd';\r\nimport formItem from 'hocs/formItem.hoc';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {ArrowRightOutlined} from '@ant-design/icons';\r\nimport {ADD_CREATE_CP_DATA, STOP_STEP_LOADING} from 'common/actions';\r\nimport {solutionProposalCreateCPFormFields} from 'common/formFields/createCP/solutionProposalCreateCP.formFields';\r\nimport {\r\n  getFields,\r\n  getLabels,\r\n  getFieldsByColumn,\r\n  getDefaultMonthValue,\r\n} from 'common/constants/solutionproposalCreateCP';\r\nimport {ifNanReturnZeroFloat, numberWithCommas} from 'common/helpers/mrHelper';\r\n\r\nimport _ from 'lodash';\r\n\r\nexport const SolutionProposalCreateCPForm = ({id, onCancel, lead, onNext, active}) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((e) => e.data.createCPData);\r\n  const [fields, setFields] = useState(\r\n    getFields(state.standard_assets || 'FLC', state.insert_type || 'Insert'),\r\n  );\r\n  const [labels, setLabels] = useState(\r\n    getLabels(state.standard_assets || 'FLC', state.insert_type || 'Insert'),\r\n  );\r\n  const submit = async (data) => {\r\n    setLoading(true);\r\n    await dispatch({type: ADD_CREATE_CP_DATA, data: {...data}});\r\n    setLoading(false);\r\n    if (active === 1) {\r\n      onNext();\r\n    }\r\n  };\r\n\r\n  const [totalCostPerKit, setTotalCostPerKit] = useState(0);\r\n  const [projectCost, setProjectCost] = useState(0);\r\n  const [directCost, setDirectCost] = useState(0);\r\n\r\n  const updateCostPerKit = useCallback(() => {\r\n    let q = [];\r\n    let r = [];\r\n    const qtyPerKitCols = getFieldsByColumn(\r\n      form.getFieldValue('standard_assets'),\r\n      form.getFieldValue('insert_type'),\r\n      'quantity_perkit',\r\n    );\r\n    const rateCols = getFieldsByColumn(\r\n      form.getFieldValue('standard_assets'),\r\n      form.getFieldValue('insert_type'),\r\n      'rate',\r\n    );\r\n    qtyPerKitCols.forEach((i) => {\r\n      q.push(ifNanReturnZeroFloat(form.getFieldValue(i)));\r\n    });\r\n    rateCols.forEach((i) => {\r\n      r.push(ifNanReturnZeroFloat(form.getFieldValue(i)));\r\n    });\r\n    let sum = 0;\r\n    for (let i = 0; i < q.length; i++) {\r\n      sum += q[i] * r[i];\r\n    }\r\n    setTotalCostPerKit(_.round(sum, 2));\r\n  }, [form, totalCostPerKit, setTotalCostPerKit]);\r\n\r\n  const updateProjectCost = useCallback(() => {\r\n    const totalCostCols = getFieldsByColumn(\r\n      form.getFieldValue('standard_assets'),\r\n      form.getFieldValue('insert_type'),\r\n      'total_cost',\r\n    );\r\n    let temp = 0;\r\n    totalCostCols.forEach((i) => {\r\n      temp += ifNanReturnZeroFloat(form.getFieldValue(i));\r\n    });\r\n    setProjectCost(_.round(temp, 2));\r\n  }, [form, projectCost, setProjectCost]);\r\n\r\n  const updateDirectCost = useCallback(() => {\r\n    const depCostCols = getFieldsByColumn(\r\n      form.getFieldValue('standard_assets'),\r\n      form.getFieldValue('insert_type'),\r\n      'dep_cost',\r\n    );\r\n    let temp = 0;\r\n    depCostCols.forEach((i) => {\r\n      temp += ifNanReturnZeroFloat(form.getFieldValue(i));\r\n    });\r\n    // temp /= form.getFieldValue('kit_based_on_usage_ratio');\r\n    temp /= state.kit_based_on_usage_ratio;\r\n    setDirectCost(_.round(temp, 2));\r\n  }, [form, state, directCost, setDirectCost]);\r\n\r\n  // useEffect(() => {\r\n  // \tif (form.getFieldValue(\"standard_assets\") && form.getFieldValue(\"insert_type\")) {\r\n  // \t\tsetFields(getFields(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type')));\r\n  // \t\tsetLabels(getFields(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type')));\r\n  // \t}\r\n  // },[])\r\n\r\n  useEffect(() => {\r\n    if (active !== 1) {\r\n      form.submit();\r\n      dispatch({type: STOP_STEP_LOADING});\r\n    }\r\n  }, [active]);\r\n\r\n  const updateRemainingDisabledCols = useCallback(() => {\r\n    const totalKitQtysCols = getFieldsByColumn(\r\n      form.getFieldValue('standard_assets'),\r\n      form.getFieldValue('insert_type'),\r\n      'quantity',\r\n    );\r\n    const qtyPerKitCols = getFieldsByColumn(\r\n      form.getFieldValue('standard_assets'),\r\n      form.getFieldValue('insert_type'),\r\n      'quantity_perkit',\r\n    );\r\n    const rateCols = getFieldsByColumn(\r\n      form.getFieldValue('standard_assets'),\r\n      form.getFieldValue('insert_type'),\r\n      'rate',\r\n    );\r\n    const totalMatReqCols = getFieldsByColumn(\r\n      form.getFieldValue('standard_assets'),\r\n      form.getFieldValue('insert_type'),\r\n      'tot_mat_req',\r\n    );\r\n    const totalCostCols = getFieldsByColumn(\r\n      form.getFieldValue('standard_assets'),\r\n      form.getFieldValue('insert_type'),\r\n      'total_cost',\r\n    );\r\n    const monthCols = getFieldsByColumn(\r\n      form.getFieldValue('standard_assets'),\r\n      form.getFieldValue('insert_type'),\r\n      'month',\r\n    );\r\n    const depCostCols = getFieldsByColumn(\r\n      form.getFieldValue('standard_assets'),\r\n      form.getFieldValue('insert_type'),\r\n      'dep_cost',\r\n    );\r\n\r\n    qtyPerKitCols.forEach((i, idx) => {\r\n      if (form.getFieldValue(totalKitQtysCols[idx]) && form.getFieldValue(qtyPerKitCols[idx])) {\r\n        const totalMatReqVal =\r\n          form.getFieldValue(totalKitQtysCols[idx]) * form.getFieldValue(qtyPerKitCols[idx]);\r\n        form.setFieldsValue({\r\n          [totalMatReqCols[idx]]: totalMatReqVal,\r\n          [totalCostCols[idx]]: form.getFieldValue(rateCols[idx]) * totalMatReqVal,\r\n        });\r\n      } else {\r\n        form.setFieldsValue({\r\n          [totalMatReqCols[idx]]: 0,\r\n          [totalCostCols[idx]]: 0,\r\n        });\r\n      }\r\n\r\n      if (\r\n        form.getFieldValue(totalCostCols[idx]) &&\r\n        form.getFieldValue(monthCols[idx]) &&\r\n        form.getFieldValue('yantra_cycle')\r\n      ) {\r\n        form.setFieldsValue({\r\n          [depCostCols[idx]]: _.round(\r\n            (form.getFieldValue(totalCostCols[idx]) / form.getFieldValue(monthCols[idx]) / 30) *\r\n              form.getFieldValue('yantra_cycle'),\r\n            2,\r\n          ),\r\n        });\r\n      } else {\r\n        form.setFieldsValue({\r\n          [depCostCols[idx]]: 0,\r\n        });\r\n      }\r\n    });\r\n  }, [form]);\r\n\r\n  const updateTotalKitQtysCols = useCallback(() => {\r\n    if (state.kit_based_on_usage_ratio) {\r\n      const totalKitQtysCols = getFieldsByColumn(\r\n        form.getFieldValue('standard_assets'),\r\n        form.getFieldValue('insert_type'),\r\n        'quantity',\r\n      );\r\n      let temp = {};\r\n      totalKitQtysCols.forEach((i) => {\r\n        if (i !== 'mould_quantity') {\r\n          form.setFieldsValue({\r\n            [i]: state.kit_based_on_usage_ratio,\r\n          });\r\n        } else {\r\n          form.setFieldsValue({\r\n            mould_quantity: 1,\r\n          });\r\n        }\r\n      });\r\n      form.setFieldsValue({...temp});\r\n      updateRemainingDisabledCols();\r\n    }\r\n  }, [form, state]);\r\n\r\n  const updateMonthCols = useCallback(() => {\r\n    const monthCols = getFieldsByColumn(\r\n      form.getFieldValue('standard_assets'),\r\n      form.getFieldValue('insert_type'),\r\n      'month',\r\n    );\r\n    monthCols.forEach((i) => {\r\n      if (!form.getFieldValue(i)) {\r\n        form.setFieldsValue({\r\n          [i]: getDefaultMonthValue(i.slice(0, -6)),\r\n        });\r\n      }\r\n    });\r\n  }, [form]);\r\n\r\n  useEffect(() => {\r\n    updateTotalKitQtysCols();\r\n    updateMonthCols();\r\n    updateCostPerKit();\r\n    updateProjectCost();\r\n    updateDirectCost();\r\n  }, [form]);\r\n\r\n  const handleFieldsChange = useCallback(\r\n    (data) => {\r\n      if (data[0]) {\r\n        if (data[0].name) {\r\n          const currentInputField = data[0].name[0];\r\n          console.log(currentInputField);\r\n\r\n          if (currentInputField === 'standard_assets' || currentInputField === 'insert_type') {\r\n            setFields(\r\n              getFields(form.getFieldValue('standard_assets'), form.getFieldValue('insert_type')),\r\n            );\r\n            setLabels(\r\n              getLabels(form.getFieldValue('standard_assets'), form.getFieldValue('insert_type')),\r\n            );\r\n            updateTotalKitQtysCols();\r\n            updateMonthCols();\r\n          } else {\r\n            const totalKitQtysCols = getFieldsByColumn(\r\n              form.getFieldValue('standard_assets'),\r\n              form.getFieldValue('insert_type'),\r\n              'quantity',\r\n            );\r\n            const qtyPerKitCols = getFieldsByColumn(\r\n              form.getFieldValue('standard_assets'),\r\n              form.getFieldValue('insert_type'),\r\n              'quantity_perkit',\r\n            );\r\n            const rateCols = getFieldsByColumn(\r\n              form.getFieldValue('standard_assets'),\r\n              form.getFieldValue('insert_type'),\r\n              'rate',\r\n            );\r\n            const totalMatReqCols = getFieldsByColumn(\r\n              form.getFieldValue('standard_assets'),\r\n              form.getFieldValue('insert_type'),\r\n              'tot_mat_req',\r\n            );\r\n            const totalCostCols = getFieldsByColumn(\r\n              form.getFieldValue('standard_assets'),\r\n              form.getFieldValue('insert_type'),\r\n              'total_cost',\r\n            );\r\n            const monthCols = getFieldsByColumn(\r\n              form.getFieldValue('standard_assets'),\r\n              form.getFieldValue('insert_type'),\r\n              'month',\r\n            );\r\n            const depCostCols = getFieldsByColumn(\r\n              form.getFieldValue('standard_assets'),\r\n              form.getFieldValue('insert_type'),\r\n              'dep_cost',\r\n            );\r\n\r\n            qtyPerKitCols.forEach((i, idx) => {\r\n              if (\r\n                currentInputField === totalKitQtysCols[idx] ||\r\n                currentInputField === qtyPerKitCols[idx] ||\r\n                currentInputField === rateCols[idx] ||\r\n                currentInputField === totalMatReqCols[idx] ||\r\n                currentInputField === totalCostCols[idx] ||\r\n                currentInputField === monthCols[idx] ||\r\n                currentInputField === depCostCols[idx]\r\n              ) {\r\n                if (\r\n                  form.getFieldValue(totalKitQtysCols[idx]) &&\r\n                  form.getFieldValue(qtyPerKitCols[idx])\r\n                ) {\r\n                  const totalMatReqVal =\r\n                    form.getFieldValue(totalKitQtysCols[idx]) *\r\n                    form.getFieldValue(qtyPerKitCols[idx]);\r\n                  form.setFieldsValue({\r\n                    [totalMatReqCols[idx]]: totalMatReqVal,\r\n                    [totalCostCols[idx]]: form.getFieldValue(rateCols[idx]) * totalMatReqVal,\r\n                  });\r\n                } else {\r\n                  form.setFieldsValue({\r\n                    [totalMatReqCols[idx]]: 0,\r\n                    [totalCostCols[idx]]: 0,\r\n                  });\r\n                }\r\n\r\n                if (\r\n                  form.getFieldValue(totalCostCols[idx]) &&\r\n                  form.getFieldValue(monthCols[idx]) &&\r\n                  form.getFieldValue('yantra_cycle')\r\n                ) {\r\n                  form.setFieldsValue({\r\n                    [depCostCols[idx]]: _.round(\r\n                      (form.getFieldValue(totalCostCols[idx]) /\r\n                        form.getFieldValue(monthCols[idx]) /\r\n                        30) *\r\n                        form.getFieldValue('yantra_cycle'),\r\n                      2,\r\n                    ),\r\n                  });\r\n                } else {\r\n                  form.setFieldsValue({\r\n                    [depCostCols[idx]]: 0,\r\n                  });\r\n                }\r\n              }\r\n            });\r\n          }\r\n          updateCostPerKit();\r\n          updateProjectCost();\r\n          updateDirectCost();\r\n        }\r\n      }\r\n    },\r\n    [form, fields, labels],\r\n  );\r\n\r\n  // const handleFieldsChange = (data) => {\r\n  //   if(data[0]){\r\n  //     if(data[0].name){\r\n  //       if(data[0].name[0]==='standard_assets') {\r\n  //         // console.log(getFields(data[0].value),form.getFieldValue('insert_type'),'Ggg')\r\n  //         setFields(getFields(data[0].value,form.getFieldValue('insert_type')))\r\n  //         setLabels(getLabels(form.getFieldValue('standard_assets'),data[0].value))\r\n  //       }\r\n  //       if(data[0].name[0]==='insert_type') {\r\n  //         // console.log(form.getFieldValue('standard_assets'),getFields(data[0].value),'Ggg')\r\n  //         setFields(getFields(form.getFieldValue('standard_assets'),data[0].value))\r\n  //         setLabels(getLabels(form.getFieldValue('standard_assets'),data[0].value))\r\n  //       }}}\r\n  // }\r\n\r\n  return (\r\n    <Spin spinning={loading}>\r\n      <Form\r\n        initialValues={{\r\n          ...state,\r\n          insert_type: state.insert_type || 'Insert',\r\n          standard_assets: state.standard_assets || 'FLC',\r\n        }}\r\n        onFinish={submit}\r\n        form={form}\r\n        layout=\"vertical\"\r\n        // hideRequiredMark\r\n        onFieldsChange={handleFieldsChange}\r\n        autoComplete=\"off\">\r\n        <Divider orientation=\"left\">Capex</Divider>\r\n        <div className=\"row px-2\">\r\n          {state.solution_flc ? <Tag>FLC</Tag> : null}\r\n          {state.solution_fsc ? <Tag>FSC</Tag> : null}\r\n          {state.solution_crate ? <Tag>Crate</Tag> : null}\r\n          {state.solution_ppbox ? <Tag>PP Box</Tag> : null}\r\n          {state.solution_palletized_box ? <Tag>Solution Palletized Box</Tag> : null}\r\n          {state.solution_palletized_crate ? <Tag>Solution Palletized Crate</Tag> : null}\r\n          {state.solution_pp ? <Tag>Solution PP</Tag> : null}\r\n          {state.solution_stacking_nesting ? <Tag>Solution Stacking Nesting</Tag> : null}\r\n          {state.solution_wp ? <Tag>Solution WP</Tag> : null}\r\n        </div>\r\n        <Row style={{justifyContent: 'left'}}>\r\n          {solutionProposalCreateCPFormFields.map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className=\"p-2\">\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{justifyContent: 'left'}}>\r\n          <Col span={3}>\r\n            <div className=\"p-2 flex row justify-center\">\r\n              <b />\r\n            </div>\r\n          </Col>\r\n          {[...fields].slice(0, 7).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\r\n                <b>{item.customLabel}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{justifyContent: 'left'}}>\r\n          {labels.slice(0, 1).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\r\n                <b>{item}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {[...fields].slice(0, 7).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2\">\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{justifyContent: 'left'}}>\r\n          {labels.slice(1, 2).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\r\n                <b>{item}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {[...fields].slice(7, 14).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2\">\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{justifyContent: 'left'}}>\r\n          {labels.slice(2, 3).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\r\n                <b>{item}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {[...fields].slice(14, 21).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2\">\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{justifyContent: 'left'}}>\r\n          {labels.slice(3, 4).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\r\n                <b>{item}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {[...fields].slice(21, 28).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2\">\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{justifyContent: 'left'}}>\r\n          {labels.slice(4, 5).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\r\n                <b>{item}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {[...fields].slice(28, 35).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2\">\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{justifyContent: 'left'}}>\r\n          {labels.slice(5, 6).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\r\n                <b>{item}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {[...fields].slice(35, 42).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2\">\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{justifyContent: 'left'}}>\r\n          {labels.slice(6, 7).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\r\n                <b>{item}</b>\r\n              </div>\r\n            </Col>\r\n          ))}\r\n          {[...fields].slice(42, 49).map((item, idx) => (\r\n            <Col span={3}>\r\n              <div key={idx.toString()} className=\"p-2\">\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row className=\"text-center\">\r\n          <Col span={3}></Col>\r\n          <Col span={3}></Col>\r\n          <Col span={3}></Col>\r\n          <Col span={3}>{`Total Cost/Kit: ${numberWithCommas(totalCostPerKit)}`}</Col>\r\n          <Col span={3}></Col>\r\n          <Col span={3}>{`Project Cost: ${numberWithCommas(projectCost)}`}</Col>\r\n          <Col span={3}></Col>\r\n          <Col span={3}>{`Direct Cost: ${numberWithCommas(directCost)}`}</Col>\r\n        </Row>\r\n        {/* <Form.List name='solutions'> */}\r\n        {/*  {(fields, { add, remove }) => { */}\r\n        {/*    return ( */}\r\n        {/*      <div> */}\r\n        {/*        {fields.map((field, index) => ( */}\r\n        {/*          <Row align='middle'> */}\r\n        {/*            {formListSolutionProposalCreateCPFormFields.slice(0,1).map((item) => ( */}\r\n        {/*              <Col span={4}> */}\r\n        {/*                <div className='p-2'> */}\r\n        {/*                  {formItem({ */}\r\n        {/*                    ...item, */}\r\n        {/*                    noLabel: index !== 0, */}\r\n        {/*                    form, */}\r\n        {/*                    others: { */}\r\n        {/*                      formOptions: { */}\r\n        {/*                        ...field, */}\r\n        {/*                        // hidden:true, */}\r\n        {/*                        name: [field.name, item.key], */}\r\n        {/*                        fieldKey: [field.fieldKey, item.key], */}\r\n        {/*                      }, */}\r\n        {/*                    }, */}\r\n        {/*                  })} */}\r\n        {/*                </div> */}\r\n        {/*              </Col> */}\r\n        {/*            ))} */}\r\n        {/*            {[...createFields('std_ast')].slice(1,7).map((item) => ( */}\r\n        {/*              <Col span={3}> */}\r\n        {/*                <div className='p-2'> */}\r\n        {/*                  {formItem({ */}\r\n        {/*                    ...item, */}\r\n        {/*                    noLabel: index !== 0, */}\r\n        {/*                    form, */}\r\n        {/*                    others: { */}\r\n        {/*                      formOptions: { */}\r\n        {/*                        ...field, */}\r\n        {/*                        name: [field.name, item.key], */}\r\n        {/*                        fieldKey: [field.fieldKey, item.key], */}\r\n        {/*                      }, */}\r\n        {/*                    }, */}\r\n        {/*                  })} */}\r\n        {/*                </div> */}\r\n        {/*              </Col> */}\r\n        {/*            ))} */}\r\n        {/*          </Row> */}\r\n        {/*        ))} */}\r\n        {/*      </div> */}\r\n        {/*    ); */}\r\n        {/*  }} */}\r\n        {/* </Form.List> */}\r\n        <Row justify=\"space-between\">\r\n          <div className=\"row\">\r\n            <Button type=\"primary\" htmlType=\"submit\" disabled>\r\n              Submit\r\n            </Button>\r\n            <div className=\"p-2\" />\r\n            <Button type=\"primary\" onClick={onCancel}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <Button type=\"link\" htmlType=\"submit\">\r\n            <ArrowRightOutlined style={{fontSize: 30}} />\r\n          </Button>\r\n        </Row>\r\n      </Form>\r\n    </Spin>\r\n  );\r\n};\r\n\r\nexport default SolutionProposalCreateCPForm;\r\n"],"sourceRoot":""}